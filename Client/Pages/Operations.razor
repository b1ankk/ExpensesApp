@page "/operations"
@using ExpensesApp.Client.HttpUtils
@using ExpensesApp.Client.Services
@using ExpensesApp.Shared.Models.DTOs
@using ExpensesApp.Shared.Constants
@inject PublicHttpClient httpClient
@inject NavigationManager navigationManager
@inject ICsvParseService csvParseService


<h3>Operations</h3>

<div style="padding-top: 10px; padding-bottom: 10px; ">
    <div style="padding: 5px">
        <InputFile OnChange="LoadOperationsFromFile"></InputFile>
    </div>
    <div style="padding: 5px">
        <button class="btn btn-primary" @onclick="PostLoadedOperationsAndRefreshView">Add From File</button>
    </div>
</div>

@if (operations == null) {
    <p>
        <em>Loading...</em>
    </p>
}
else {
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Operation Type</th>
            <th>Operation Date</th>
            <th>Transaction Date</th>
            <th>Transaction Type</th>
            <th>Amount</th>
            <th>Currency</th>
            <th>Balance After Operation</th>
            <th>Description</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var operation in operations) {
            <tr>
                <td>@operation.OperationType?.Type</td>
                <td>@operation.OperationDate.ToString("d")</td>
                <td>@operation.TransactionDate.ToString("d")</td>
                <td>@operation.TransactionType</td>
                <td>@operation.Amount</td>
                <td>@operation.Currency</td>
                <td>@operation.AfterOperationBalance</td>
                <td>@operation.Description</td>
                <td>
                    <div style="text-align: center">
                        <button class="btn btn-primary" @onclick="@(() => NavigateToEditPage(operation))">Edit</button>
                        <button class="btn btn-danger">Delete</button>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private IReadOnlyCollection<VerboseOperationDto> operations;
    private IEnumerable<OperationDto> loadedOperations;
    private IReadOnlyCollection<OperationTypeDto> operationTypes;
    
    protected override async Task OnInitializedAsync() {
        await LoadAndDisplayOperationsFromServer();
        operationTypes = await GetOperationTypes();
    }
    
    private async Task PostLoadedOperationsAndRefreshView() {
        if (loadedOperations != null) {
            await httpClient.Client.PostAsJsonAsync(Paths.Api.Operations, loadedOperations);
            await LoadAndDisplayOperationsFromServer();
            loadedOperations = null;
        }
    }
    
    private async Task LoadAndDisplayOperationsFromServer() {
        operations = await GetVerboseOperations();
    }

    private async Task<IReadOnlyCollection<VerboseOperationDto>> GetVerboseOperations() {
        return await httpClient.Client.GetFromJsonAsync<IReadOnlyCollection<VerboseOperationDto>>(Paths.Api.VerboseOperations);
    }
    
    private async Task<IReadOnlyCollection<OperationTypeDto>> GetOperationTypes() {
        return await httpClient.Client.GetFromJsonAsync<IReadOnlyCollection<OperationTypeDto>>(Paths.Api.OperationTypes);
    }
    
    
    
    private async Task LoadOperationsFromFile(InputFileChangeEventArgs e) {
        var file = e.File;
        await using var stream = file.OpenReadStream();
        
        loadedOperations = await csvParseService.ParseOperationDtosFromStreamAsync(stream);
    }
    
    
    void NavigateToEditPage(VerboseOperationDto operation) {
        navigationManager.NavigateTo($"{Paths.Page.EditOperation}/{operation.IdOperation}");
    }
}
