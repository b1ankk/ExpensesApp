@page "/operations"
@using ExpensesApp.Client.HttpUtils
@using ExpensesApp.Client.Services
@using ExpensesApp.Shared.Models.DTOs
@using ExpensesApp.Shared.Constants
@using System.IO


@inject PublicHttpClient httpClient
@inject NavigationManager navigationManager
@inject ICsvParseService csvParseService


<div class="container-md">
    <h3>Operations</h3>

    <div style="padding-top: 10px; padding-bottom: 10px; ">
        <div style="padding: 5px">
            <InputFile OnChange="LoadOperationsFromFile"></InputFile>
        </div>
        <div style="padding: 5px">
            <button class="btn btn-primary" @onclick="PostLoadedOperationsAndRefreshView">Add From File</button>
        </div>
    </div>

    @if (operations == null) {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else {
        <OperationsTable Operations="@operations"></OperationsTable>
    }
</div>


@code {
    private IReadOnlyCollection<VerboseOperationDto> operations;
    private IEnumerable<OperationDto> loadedOperations;
    private IReadOnlyCollection<OperationTypeDto> operationTypes;

    protected override async Task OnInitializedAsync() {
        await LoadAndDisplayOperationsFromServer();
        operationTypes = await GetOperationTypes();
    }

    private async Task PostLoadedOperationsAndRefreshView() {
        if (loadedOperations != null) {
            await httpClient.Client.PostAsJsonAsync(Paths.Api.Operations, loadedOperations);
            await LoadAndDisplayOperationsFromServer();
            loadedOperations = null;
        }
    }

    private async Task LoadAndDisplayOperationsFromServer() {
        operations = await GetVerboseOperations();
    }

    private async Task<IReadOnlyCollection<VerboseOperationDto>> GetVerboseOperations() {
        return await httpClient.Client.GetFromJsonAsync<IReadOnlyCollection<VerboseOperationDto>>(Paths.Api.VerboseOperations);
    }

    private async Task<IReadOnlyCollection<OperationTypeDto>> GetOperationTypes() {
        return await httpClient.Client.GetFromJsonAsync<IReadOnlyCollection<OperationTypeDto>>(Paths.Api.OperationTypes);
    }


    private async Task LoadOperationsFromFile(InputFileChangeEventArgs e) {
        IBrowserFile file = e.File;
        await using Stream stream = file.OpenReadStream();

        loadedOperations = await csvParseService.ParseOperationDtosFromStreamAsync(stream);
    }

}
