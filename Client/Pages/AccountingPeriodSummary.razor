@page "/accounting-periods/{IdPeriod:int}/summary"
@using ExpensesApp.Shared.Models.DTOs
@using ExpensesApp.Client.HttpUtils
@using ExpensesApp.Shared.Constants
@using AntDesign

@inject PublicHttpClient httpClient


<div class="container-md">
    <h3>Accounting Period Summary</h3>

    @if (summary != null) {
        <h4>
            <pre>@summary?.AccountingPeriod?.StartDateInclusive.ToLongDateString()  -  @summary?.AccountingPeriod?.EndDateExclusive.ToLongDateString()</pre>
        </h4>
        
        <Table DataSource="summary.Rows" Bordered Size="TableSize.Middle" PageSize="200">
            <RowTemplate>
                <Column TData="string" DataIndex="Type.Type"
                        Title="Type"
                        Filterable Sortable
                        Width="200" 
                />

                <Column TData="string" DataIndex="Owner.Owner" 
                        Title="Owner"
                        Filterable Sortable
                        Width="200"
                />

                <Column @bind-Field="@(context.Sum)" 
                        Title="Sum" 
                        Filterable Sortable
                />
            </RowTemplate>
            
            <ExpandTemplate Context="row">
                <Table DataSource="row.Data.Operations" HidePagination PageSize="@int.MaxValue" Bordered Size="TableSize.Small" ScrollX="1200px">
                    <RowTemplate>
                        <Column @bind-Field="@context.OperationDate" 
                                Title="Operation Date" 
                                Filterable Sortable
                                Width="200px">
                            @context.OperationDate.ToString("d")
                        </Column>
                        <Column @bind-Field="@context.TransactionDate"
                                Title="Transaction Date" 
                                Filterable Sortable
                                Width="200px">
                            @context.TransactionDate.ToString("d")
                        </Column>
                        <Column @bind-Field="@context.TransactionType" 
                                Title="Transaction Type"
                                Filterable Sortable
                                Width="250px"
                        />
                        <Column @bind-Field="@context.Amount" 
                                Title="Amount" 
                                Filterable Sortable
                                Width="150px"
                        />
                        <Column @bind-Field="@context.Currency" 
                                Title="Currency" 
                                Filterable Sortable
                                Width="150px"
                        />
                        <Column @bind-Field="@context.AfterOperationBalance" 
                                Title="Balance After Operation"
                                Filterable Sortable
                        />
                    </RowTemplate>
                    <ExpandTemplate>
                        <pre class="m-0">@context.Data.Description.Trim()</pre>
                    </ExpandTemplate>
                </Table>
            </ExpandTemplate>
        </Table>
        
        <div>
            <h3>Summary</h3>
            
            <div class="d-flex">
                <table class="owner-summary-table table table-bordered border-light fs-5">
                    
                    @{
                        var ownerSummaries = GetRowsGroupedByOwner();
                        
                        <thead class="table">
                            <tr>
                                <th></th>
                                <th class="text-center">General</th>
                                @foreach (var ownerRows in ownerSummaries) {
                                    <th class="text-center">@ownerRows.Key</th>
                                }
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="table-danger">
                                <th>Expenses</th>
                                <td class="text-end">@GetSumOfExpenses(summary.Rows)</td>
                                @foreach (var ownerRows in ownerSummaries) {
                                    <td class="text-end">@GetSumOfExpenses(ownerRows)</td>
                                }
                                <td class="w-100"></td>
                            </tr>
                            <tr class="table-success">
                                <th>Income</th>
                                <td class="text-end">@GetSumOfIncomes(summary.Rows)</td>
                                @foreach (var ownerRows in ownerSummaries) {
                                    <td class="text-end">@GetSumOfIncomes(ownerRows)</td>
                                }
                                <td class="w-100"></td>
                            </tr>
                            <tr class="table-primary text-end">
                                <th class="text-start">Balance</th>
                                <td class="text-end">@GetBalance(summary.Rows)</td>
                                @foreach (var ownerRows in ownerSummaries) {
                                    <td class="text-end">@GetBalance(ownerRows)</td>
                                }
                                <td class="w-100"></td>
                            </tr>
                        </tbody>
                    }
                </table>
            </div>
        </div>
    }
    else {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }

</div>


@code {

    [Parameter]
    public int IdPeriod { get; set; }

    private AccountingSummaryDto summary;

    protected override async Task OnInitializedAsync() {
        summary = await httpClient.Client.GetFromJsonAsync<AccountingSummaryDto>(Paths.Api.AccountingPeriodSummary(IdPeriod));
    }


    private IOrderedEnumerable<IGrouping<string, AccountingSummaryDto.Row>> GetRowsGroupedByOwner() {
        var ownerSummaries = summary.Rows
                                    .GroupBy(x => x.Owner.Owner)
                                    .OrderBy(x => x.Key);
        return ownerSummaries;
    }

    private decimal GetSumOfExpenses(IEnumerable<AccountingSummaryDto.Row> rows) {
        return rows.Where(x => x.Sum < 0).Sum(x => x.Sum);
    }
    
    private decimal GetSumOfIncomes(IEnumerable<AccountingSummaryDto.Row> rows) {
        return rows.Where(x => x.Sum > 0).Sum(x => x.Sum);
    }
    
    private decimal GetBalance(IEnumerable<AccountingSummaryDto.Row> rows) {
        return rows.Sum(x => x.Sum);
    }
}
