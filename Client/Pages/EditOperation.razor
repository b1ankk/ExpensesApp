@page "/operations/edit/{IdOperation:int}"
@using ExpensesApp.Client.HttpUtils
@using AutoMapper
@using ExpensesApp.Shared.Models
@using ExpensesApp.Shared.Models.DTOs
@using ExpensesApp.Shared.Constants

@inject PublicHttpClient httpClient
@inject IMapper mapper; 
@inject NavigationManager navigationManager;


<div class="container-md">
    <h3>Edit operation</h3>

    @if (Operation != null) {
        <OperationEditForm Operation="Operation" OnValidSubmit="SaveChangesAndReturnToOperations"/>
    }
    else {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
</div>


@code {

    [Parameter]
    public int IdOperation { get; set; }

    private Operation Operation { get; set; }
    private ICollection<OperationTypeDto> OperationTypes { get; set; }

    protected override async Task OnInitializedAsync() {
        var operationDto = await httpClient.Client.GetFromJsonAsync<OperationDto>(Paths.Api.Operation(IdOperation));
        Operation = mapper.Map<Operation>(operationDto);
        OperationTypes = await httpClient.Client.GetFromJsonAsync<ICollection<OperationTypeDto>>(Paths.Api.OperationTypes);
    }

    private async Task SaveChangesAndReturnToOperations() {
        await PutOperation();
        NavigateBackToOperations();
    }

    private void NavigateBackToOperations() {
        navigationManager.NavigateTo(Paths.Page.Operations);
    }

    private async Task PutOperation() {
        var operationDto = mapper.Map<OperationDto>(Operation);
        await httpClient.Client.PutAsJsonAsync(Paths.Api.Operations, operationDto);
    }

}
