@using ExpensesApp.Shared.Models.DTOs


<div class="modal fade" id="createPeriodModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="createPeriodLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <EditForm Model="accountingPeriod" OnValidSubmit="CallOnValidSubmit" class="container-fluid">
                
                <div class="modal-header">
                    <h5 class="modal-title" id="createPeriodLabel">Create Accounting Period</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body container-fluid">
                    <div class="row">
                        <div class="form-group col">
                            <label>Start Date Inclusive: </label>
                            <InputDate class="form-control" @bind-Value="@accountingPeriod.StartDateInclusive"/>
                            <ValidationMessage For="@(() => accountingPeriod.CreationDateTime)"/>
                        </div>

                        <div class="form-group col">
                            <label>End Date Exclusive: </label>
                            <InputDate class="form-control" @bind-Value="@accountingPeriod.EndDateExclusive"/>
                            <ValidationMessage For="@(() => accountingPeriod.CreationDateTime)"/>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
                </div>

            </EditForm>
        </div>
    </div>
</div>





@code {
    [Parameter]
    public string ModalId { get; set; }

    [Parameter]
    public EventCallback<AccountingPeriodDto> OnValidSubmit { get; set; }

    private AccountingPeriodDto accountingPeriod;

    protected override void OnInitialized() {
        accountingPeriod = new AccountingPeriodDto {
            StartDateInclusive = DateTime.Now.AddMonths(-1).Date,
            EndDateExclusive = DateTime.Now.Date
        };
    }

    private async Task CallOnValidSubmit() {
        await OnValidSubmit.InvokeAsync(accountingPeriod);
    }

}
